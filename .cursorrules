# 키움 API 알고리즘 매매 프로그램 개발 규칙

## 📋 프로젝트 개요
- Python 3.13 기반 TA-Lib 활용 스윙 트레이딩
- pykrx를 통한 데이터 수집 + 키움 API 실시간 연동
- Streamlit을 이용한 웹 UI 개발  
- 2주 완성 목표의 1인 개발 프로젝트
- 100만원 규모 스윙 트레이딩에 최적화

## 🛠️ 개발 환경 관리

### 터미널 명령어 처리 원칙 (CRITICAL RULE)

#### 운영체제 감지 및 적절한 명령어 사용
- **운영체제 확인 필수**: 터미널 명령어 실행 전 반드시 운영체제를 감지하고 해당 OS에 맞는 명령어 사용
- **명령어 경로 차이 인식**: Windows와 Unix 계열 시스템의 명령어 경로 및 구문 차이 고려
- **가상환경 활성화**: OS별 가상환경 활성화 명령어 구분

#### OS별 핵심 명령어 차이점
```python
import platform
import os

def get_os_commands():
    """운영체제별 명령어 딕셔너리 반환"""
    system = platform.system().lower()
    
    if system == "windows":
        return {
            'python': 'python',
            'pip': 'pip',
            'venv_activate': '.\\venv\\Scripts\\activate',
            'venv_create': 'python -m venv venv',
            'path_separator': '\\',
            'clear': 'cls',
            'list_dir': 'dir',
            'shell': 'powershell'
        }
    elif system in ["linux", "darwin"]:  # Linux or macOS
        return {
            'python': 'python3',
            'pip': 'pip3',
            'venv_activate': 'source venv/bin/activate',
            'venv_create': 'python3 -m venv venv',
            'path_separator': '/',
            'clear': 'clear',
            'list_dir': 'ls -la',
            'shell': 'bash'
        }

# 사용 예시
commands = get_os_commands()
print(f"가상환경 활성화: {commands['venv_activate']}")
```

#### 터미널 명령어 실행 시 필수 체크사항
1. **OS 감지**: `platform.system()` 또는 환경변수로 운영체제 확인
2. **Python 실행파일**: Windows(python), Linux/macOS(python3)
3. **가상환경 경로**: Windows(Scripts), Linux/macOS(bin)
4. **경로 구분자**: Windows(\\), Linux/macOS(/)
5. **셸 타입**: Windows(PowerShell/CMD), Linux/macOS(Bash/Zsh)

## 💻 코드 품질 원칙

### 가독성 우선 (Readability First)
- **명확한 네이밍**: 의미 있는 변수명, 함수명, 클래스명 사용
  - 클래스: PascalCase (예: `KiwoomApiClient`, `TradingStrategy`)
  - 함수/변수: snake_case (예: `get_stock_price`, `current_price`)
  - 상수: UPPER_SNAKE_CASE (예: `MAX_RETRY_COUNT`, `API_TIMEOUT`)
  - 파일명: snake_case (예: `kiwoom_client.py`, `trading_strategy.py`)
- **주석과 문서화**: 복잡한 로직과 비즈니스 규칙에 명확한 주석 추가
- **일관된 코딩 스타일**: 프로젝트 전반에 걸쳐 일관성 유지

### 간결성과 명확성 (Simplicity & Clarity)
- **KISS 원칙**: Keep It Simple, Stupid - 불필요한 복잡성 제거
- **DRY 원칙**: Don't Repeat Yourself - 중복 코드 제거 및 재사용 가능한 함수/클래스 설계
- **단일 책임 원칙**: 하나의 함수/클래스는 하나의 명확한 책임만 가짐

### 타입 힌트 필수
```python
from typing import Dict, List, Optional, Union, Tuple
import pandas as pd

def calculate_rsi(prices: pd.Series, period: int = 14) -> pd.Series:
    """RSI 계산 함수"""
    pass

def get_stock_data(symbol: str, start_date: str) -> Optional[pd.DataFrame]:
    """주식 데이터 조회"""
    pass
```

## 🏗️ 설계 원칙

### SOLID 원칙 적용
- **Single Responsibility**: 각 클래스는 하나의 명확한 책임
- **Open/Closed**: 확장에는 열려있고 수정에는 닫혀있는 설계
- **Liskov Substitution**: 상속 관계에서 기본 클래스 대체 가능
- **Interface Segregation**: 최소한의 인터페이스 분리
- **Dependency Inversion**: 추상화에 의존, 구체 구현에 의존하지 않음

### 모듈화와 계층 구조
```python
# 예시: 전략 기본 클래스
from abc import ABC, abstractmethod

class BaseStrategy(ABC):
    @abstractmethod
    def generate_signals(self, data: pd.DataFrame) -> pd.Series:
        """매매 신호 생성"""
        pass
    
    @abstractmethod
    def calculate_position_size(self, signal: int, portfolio_value: float) -> float:
        """포지션 크기 계산"""
        pass
```

## 📈 TA-Lib 기반 개발 원칙

### 지표 구현 우선순위
1. **직접 구현 금지**: 복잡한 기술적 지표는 TA-Lib 사용
2. **OHLCV 데이터**: 95% 이상의 지표가 OHLCV로 계산 가능
3. **검증된 라이브러리**: TA-Lib은 업계 표준 기술적 분석 도구
4. **매개변수 최적화**: 백테스팅을 통한 지표 파라미터 튜닝

### 스윙 트레이딩 권장 설정
```python
# 표준 매개변수 (스윙 트레이딩용)
SWING_PARAMS = {
    'RSI': {'period': 14, 'oversold': 30, 'overbought': 70},
    'MACD': {'fast': 12, 'slow': 26, 'signal': 9},
    'BB': {'period': 20, 'deviation': 2.0},
    'STOCH': {'k_period': 14, 'd_period': 3},
    'ATR': {'period': 14}
}
```

## 📊 데이터 처리 원칙

### pykrx 기반 데이터 수집
```python
import pykrx.stock as stock
from datetime import datetime, timedelta

def collect_stock_data(symbol: str, days: int = 500) -> pd.DataFrame:
    """pykrx를 이용한 주식 데이터 수집"""
    end_date = datetime.now().strftime('%Y%m%d')
    start_date = (datetime.now() - timedelta(days=days)).strftime('%Y%m%d')
    
    try:
        data = stock.get_market_ohlcv_by_date(start_date, end_date, symbol)
        return data
    except Exception as e:
        logging.error(f"데이터 수집 실패 {symbol}: {e}")
        return pd.DataFrame()
```

## 🔒 보안 및 환경 관리

### API 키 및 민감정보 관리 (절대 준수)
```python
import os
from dotenv import load_dotenv

load_dotenv()

# 올바른 방법
API_KEY = os.getenv('KIWOOM_API_KEY')
ACCOUNT_NUMBER = os.getenv('TRADING_ACCOUNT')

# 금지: 하드코딩
# API_KEY = "your_api_key_here"  # 절대 금지!
```

### 입력 검증과 최소 권한
- **모든 사용자 입력 검증**: 종목 코드, 날짜, 수량 등 유효성 검사
- **SQL 인젝션 방지**: 매개변수화된 쿼리 사용
- **환경변수 분리**: .env 파일 사용, .gitignore에 포함

## ⚠️ 에러 처리 및 로깅 원칙

### 체계적인 예외 처리
```python
import logging
import requests
from typing import Optional

def fetch_stock_data(symbol: str) -> Optional[pd.DataFrame]:
    """주식 데이터 조회 with 에러 처리"""
    max_retries = 3
    
    for attempt in range(max_retries):
        try:
            # API 호출
            response = requests.get(f"/api/stocks/{symbol}", timeout=10)
            response.raise_for_status()
            return pd.DataFrame(response.json())
            
        except requests.exceptions.ConnectionError as e:
            logging.warning(f"연결 오류 (시도 {attempt + 1}/{max_retries}): {e}")
        except requests.exceptions.Timeout as e:
            logging.warning(f"타임아웃 (시도 {attempt + 1}/{max_retries}): {e}")
        except requests.exceptions.RequestException as e:
            logging.error(f"API 오류: {e}")
            break
        except Exception as e:
            logging.error(f"예상치 못한 오류: {e}")
            break
    
    return None
```

### 로깅 시스템 설정
```python
import logging
from datetime import datetime

# 로깅 설정
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f'logs/trading_{datetime.now().strftime("%Y%m%d")}.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

# print() 사용 금지, logging 사용
logger = logging.getLogger(__name__)
logger.info("프로그램 시작")
logger.warning("경고 메시지")
logger.error("오류 발생")
```

## 🧪 테스트 원칙

### 단위 테스트 작성
```python
import unittest
import pandas as pd
from src.strategies.rsi_strategy import RSIStrategy

class TestRSIStrategy(unittest.TestCase):
    def setUp(self):
        self.strategy = RSIStrategy()
        self.sample_data = pd.DataFrame({
            'close': [100, 102, 101, 103, 105, 104, 106]
        })
    
    def test_rsi_calculation(self):
        """RSI 계산 테스트"""
        signals = self.strategy.generate_signals(self.sample_data)
        self.assertIsInstance(signals, pd.Series)
        self.assertEqual(len(signals), len(self.sample_data))
    
    def test_boundary_conditions(self):
        """경계값 테스트"""
        # 빈 데이터
        empty_data = pd.DataFrame()
        with self.assertRaises(ValueError):
            self.strategy.generate_signals(empty_data)
```

### 백테스팅 검증
- **아웃오브샘플 테스트**: 전체 데이터의 20-30% 검증용으로 분리
- **과적합 방지**: 단순한 전략 선호, 매개변수 과도한 최적화 금지
- **성과 지표**: 수익률, 샤프 비율, 최대 낙폭(MDD) 종합 평가

## ⚡ 성능 최적화 원칙

### 효율적인 자료구조와 알고리즘
- **pandas 최적화**: vectorized 연산 사용, apply() 대신 내장 함수 활용
- **TA-Lib 활용**: 복잡한 기술적 지표는 직접 구현하지 말고 TA-Lib 사용
- **메모리 관리**: 대용량 데이터 처리 시 청크 단위 처리 및 메모리 해제

### 캐싱과 최적화
```python
from functools import lru_cache
import sqlite3

@lru_cache(maxsize=128)
def get_stock_info(symbol: str) -> Dict:
    """종목 정보 캐싱"""
    pass

# 데이터베이스 연결 풀링
class DatabaseManager:
    def __init__(self):
        self.connection_pool = {}
```

## 💼 리스크 관리 원칙

### 100만원 규모 포트폴리오 관리
```python
class RiskManager:
    def __init__(self, total_capital: float = 1_000_000):
        self.total_capital = total_capital
        self.max_stocks = 5  # 최대 5종목 분산투자
        self.max_position_size = 0.25  # 종목당 최대 25%
        self.stop_loss_percent = 0.03  # 3% 손절매
    
    def calculate_position_size(self, stock_price: float) -> int:
        """안전한 포지션 크기 계산"""
        max_investment = self.total_capital * self.max_position_size
        return int(max_investment // stock_price)
    
    def check_stop_loss(self, entry_price: float, current_price: float) -> bool:
        """손절매 체크"""
        loss_percent = (entry_price - current_price) / entry_price
        return loss_percent >= self.stop_loss_percent
```
