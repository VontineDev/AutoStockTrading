파일이름 : 084_국내주식 WEBSOCKET 실시간시세 주식당일거래원.md
## 국내주식 WEBSOCKET 실시간시세

### 기본 정보
| Element          | 내용                           |
|------------------|------------------------------|
| Method           | POST                          |
| 운영 도메인        | wss://api.kiwoom.com:10000     |
| 모의투자 도메인     | wss://mockapi.kiwoom.com:10000(KRX만 지원가능) |
| URL              | /api/dostk/websocket          |
| Format           | JSON                         |
| Content-Type     | application/json;charset=UTF-8 |

### TR명 목록
- **0F**: 주식당일거래원
- **00**: 주문체결
- **04**: 잔고
- **0A**: 주식기세
- **0B**: 주식체결
- **0C**: 주식우선호가
- **0D**: 주식호가잔량
- **0E**: 주식시간외호가
- **0F**: 주식당일거래원
- **0G**: ETF NAV
- **0H**: 주식예상체결
- **0J**: 업종지수
- **0U**: 업종등락
- **0g**: 주식종목정보
- **0m**: ELW 이론가
- **0s**: 장시작시간
- **0u**: ELW 지표
- **0w**: 종목프로그램매매
- **1h**: VI발동/해제

### 요청 Body
| Element   | 한글명             | type     | Required | Length | Description                                                                 |
|-----------|-------------------|----------|----------|--------|-----------------------------------------------------------------------------|
| trnm      | 서비스명           | String   | Y        | 10     | REG : 등록, REMOVE : 해지                                                   |
| grp_no    | 그룹번호           | String   | Y        | 4      |                                                                             |
| refresh   | 기존등록유지여부    | String   | Y        | 1      | 0:기존유지안함, 1:기존유지(기본값). REMOVE 시 불필요                         |
| data      | 실시간 등록 리스트  | LIST     | -        | -      |                                                                             |
| - item    | 실시간 등록 요소    | String[] | N        | 100    | 거래소별 종목코드 (예: KRX:039490,NXT:039490_NX)                           |
| - type    | 실시간 항목        | String[] | Y        | 2      | TR 명(0A,0B...)                                                             |

### 응답 Body
| Element        | 한글명               | type   | Required | Length | Description                                      |
|----------------|---------------------|--------|----------|--------|--------------------------------------------------|
| return_code    | 결과코드             | int    | N        | -      | 0:정상, 1:오류 (데이터 수신시 미전송)             |
| return_msg     | 결과메시지           | String | N        | -      |                                                 |
| trnm           | 서비스명             | String | N        | -      | 요청값 반환 (실시간수신시 "REAL")                |
| data           | 실시간 등록리스트     | LIST   | N        | -      |                                                 |
| - type         | 실시간항목           | String | N        | -      | TR 명(0A,0B...)                                 |
| - name         | 실시간 항목명         | String | N        | -      |                                                 |
| - item         | 실시간 등록 요소      | String | N        | -      | 종목코드                                         |
| - values       | 실시간 값 리스트      | LIST   | N        | -      |                                                 |

- - 141	매도거래원1	String	N		
- - 161	매도거래원수량1	String	N		
- - 166	매도거래원별증감1	String	N		
- - 146	매도거래원코드1	String	N		
- - 271	매도거래원색깔1	String	N		
- - 151	매수거래원1	String	N		
- - 171	매수거래원수량1	String	N		
- - 176	매수거래원별증감1	String	N		
- - 156	매수거래원코드1	String	N		
- - 281	매수거래원색깔1	String	N		
- - 142	매도거래원2	String	N		
- - 162	매도거래원수량2	String	N		
- - 167	매도거래원별증감2	String	N		
- - 147	매도거래원코드2	String	N		
- - 272	매도거래원색깔2	String	N		
- - 152	매수거래원2	String	N		
- - 172	매수거래원수량2	String	N		
- - 177	매수거래원별증감2	String	N		
- - 157	매수거래원코드2	String	N		
- - 282	매수거래원색깔2	String	N		
- - 143	매도거래원3	String	N		
- - 163	매도거래원수량3	String	N		
- - 168	매도거래원별증감3	String	N		
- - 148	매도거래원코드3	String	N		
- - 273	매도거래원색깔3	String	N		
- - 153	매수거래원3	String	N		
- - 173	매수거래원수량3	String	N		
- - 178	매수거래원별증감3	String	N		
- - 158	매수거래원코드3	String	N		
- - 283	매수거래원색깔3	String	N		
- - 144	매도거래원4	String	N		
- - 164	매도거래원수량4	String	N		
- - 169	매도거래원별증감4	String	N		
- - 149	매도거래원코드4	String	N		
- - 274	매도거래원색깔4	String	N		
- - 154	매수거래원4	String	N		
- - 174	매수거래원수량4	String	N		
- - 179	매수거래원별증감4	String	N		
- - 159	매수거래원코드4	String	N		
- - 284	매수거래원색깔4	String	N		
- - 145	매도거래원5	String	N		
- - 165	매도거래원수량5	String	N		
- - 170	매도거래원별증감5	String	N		
- - 150	매도거래원코드5	String	N		
- - 275	매도거래원색깔5	String	N		
- - 155	매수거래원5	String	N		
- - 175	매수거래원수량5	String	N		
- - 180	매수거래원별증감5	String	N		
- - 160	매수거래원코드5	String	N		
- - 285	매수거래원색깔5	String	N		
- - 261	외국계매도추정합	String	N		
- - 262	외국계매도추정합변동	String	N		
- - 263	외국계매수추정합	String	N		
- - 264	외국계매수추정합변동	String	N		
- - 267	외국계순매수추정합	String	N		
- - 268	외국계순매수변동	String	N		
- - 337	거래소구분	String	N		



## PYTHON
import asyncio 
import websockets
import json

# socket 정보
# SOCKET_URL = 'wss://mockapi.kiwoom.com:10000/api/dostk/websocket'  # 모의투자 접속 URL
SOCKET_URL = 'wss://api.kiwoom.com:10000/api/dostk/websocket'  # 접속 URL
ACCESS_TOKEN = '사용자 AccessToken'  # 고객 Access Token

class WebSocketClient:
	def __init__(self, uri):
		self.uri = uri
		self.websocket = None
		self.connected = False
		self.keep_running = True

	# WebSocket 서버에 연결합니다.
	async def connect(self):
		try:
			self.websocket = await websockets.connect(self.uri)
			self.connected = True
			print("서버와 연결을 시도 중입니다.")

			# 로그인 패킷
			param = {
				'trnm': 'LOGIN',
				'token': ACCESS_TOKEN
			}

			print('실시간 시세 서버로 로그인 패킷을 전송합니다.')
			# 웹소켓 연결 시 로그인 정보 전달
			await self.send_message(message=param)

		except Exception as e:
			print(f'Connection error: {e}')
			self.connected = False

	# 서버에 메시지를 보냅니다. 연결이 없다면 자동으로 연결합니다.
	async def send_message(self, message):
		if not self.connected:
			await self.connect()  # 연결이 끊어졌다면 재연결
		if self.connected:
			# message가 문자열이 아니면 JSON으로 직렬화
			if not isinstance(message, str):
				message = json.dumps(message)

		await self.websocket.send(message)
		print(f'Message sent: {message}')

	# 서버에서 오는 메시지를 수신하여 출력합니다.
	async def receive_messages(self):
		while self.keep_running:
			try:
				# 서버로부터 수신한 메시지를 JSON 형식으로 파싱
				response = json.loads(await self.websocket.recv())

				# 메시지 유형이 LOGIN일 경우 로그인 시도 결과 체크
				if response.get('trnm') == 'LOGIN':
					if response.get('return_code') != 0:
						print('로그인 실패하였습니다. : ', response.get('return_msg'))
						await self.disconnect()
					else:
						print('로그인 성공하였습니다.')

				# 메시지 유형이 PING일 경우 수신값 그대로 송신
				elif response.get('trnm') == 'PING':
					await self.send_message(response)

				if response.get('trnm') != 'PING':
					print(f'실시간 시세 서버 응답 수신: {response}')

			except websockets.ConnectionClosed:
				print('Connection closed by the server')
				self.connected = False
				await self.websocket.close()

	# WebSocket 실행
	async def run(self):
		await self.connect()
		await self.receive_messages()

	# WebSocket 연결 종료
	async def disconnect(self):
		self.keep_running = False
		if self.connected and self.websocket:
			await self.websocket.close()
			self.connected = False
			print('Disconnected from WebSocket server')

async def main():
	# WebSocketClient 전역 변수 선언
	websocket_client = WebSocketClient(SOCKET_URL)

	# WebSocket 클라이언트를 백그라운드에서 실행합니다.
	receive_task = asyncio.create_task(websocket_client.run())

	# 실시간 항목 등록
	await asyncio.sleep(1)
	await websocket_client.send_message({ 
		'trnm': 'REG', # 서비스명
		'grp_no': '1', # 그룹번호
		'refresh': '1', # 기존등록유지여부
		'data': [{ # 실시간 등록 리스트
			'item': ['005930'], # 실시간 등록 요소
			'type': ['0F'], # 실시간 항목
		}]
	})

	# 수신 작업이 종료될 때까지 대기
	await receive_task

# asyncio로 프로그램을 실행합니다.
if __name__ == '__main__':
	asyncio.run(main())


    ## Example


Request
{
	"trnm" : "REG",
	"grp_no" : "1",
	"refresh" : "1",
	"data" : [{
		" item" : [ "005930" ],
		" type" : [ "0F" ]
	}]
}
Response
#요청
{
	'trnm': 'REG',
	'return_code': 0,
	'return_msg': ''
}

#실시간 수신
{
	'trnm': 'REAL',
	'data': [
		{
			'type': '0F',
			'name': '주식당일거래원',
			'item': '005930',
			'values': {
				'141': '',
				'161': '9350409',
				'166': '+8593585',
				'146': '993',
				'271': '!!!!',
				'151': '',
				'171': '9321128',
				'176': '+8557163',
				'156': '993',
				'281': '!!!!',
				'142': '',
				'162': '9341349',
				'167': '-9060',
				'147': '994',
				'272': '!!!!',
				'152': '',
				'172': '9315193',
				'177': '-5935',
				'157': '991',
				'282': '!!!!',
				'143': '',
				'163': '9305540',
				'168': '-35809',
				'148': '991',
				'273': '!!!!',
				'153': '',
				'173': '9301275',
				'178': '-13918',
				'158': '994',
				'283': '!!!!',
				'144': '',
				'164': '757643',
				'169': '-8547897',
				'149': '992',
				'274': '!!!!',
				'154': '',
				'174': '763965',
				'179': '-8537310',
				'159': '992',
				'284': '!!!!',
				'145': '미래에셋',
				'165': '100',
				'170': '0',
				'150': '005',
				'275': '!!!!',
				'155': '미래에셋',
				'175': '50100',
				'180': '0',
				'160': '005',
				'285': '!!!!',
				'261': '0',
				'262': '0',
				'263': '0',
				'264': '0',
				'267': '0',
				'268': '0',
				'337': '2'
			}
		}
	]
}

