파일이름 : 101_국내주식 WEBSOCKET 조건검색 목록조회.md
# 국내주식  
**WEBSOCKET**  
**조건검색**  

## 기본 정보  
※ ka10171 (조건검색 목록조회)  
**조건검색은 영웅문4에서 만드실 수 있습니다.**  

| 항목             | 내용                                             |  
|------------------|--------------------------------------------------|  
| Method           | POST                                             |  
| 운영 도메인      | wss://api.kiwoom.com:10000                       |  
| 모의투자 도메인  | wss://mockapi.kiwoom.com:10000 (KRX만 지원가능) |  
| URL              | /api/dostk/websocket                             |  
| Format           | JSON                                             |  
| Content-Type     | application/json;charset=UTF-8                   |  

[다른 TR 확인하기]  

## TR명  

| TR명                    | 코드     |  
|-------------------------|----------|  
| 조건검색 목록조회       | ka10171  |  
| 조건검색 요청 일반      | ka10172  |  
| 조건검색 요청 실시간    | ka10173  |  
| 조건검색 실시간 해제    | ka10174  |  

## 요청  

### Body  

| Element   | 한글명       | type    | Required | Length | Description        |  
|-----------|-------------|---------|----------|--------|--------------------|  
| trnm      | TR명         | String  | Y        | 7      | CNSRLST 고정값     |  

## 응답  

### Body  

| Element       | 한글명             | type    | Required | Length | Description                 |  
|---------------|--------------------|---------|----------|--------|-----------------------------|  
| return_code   | 결과코드           | int     | N        |        | 정상: 0                     |  
| return_msg    | 결과메시지         | String  | N        |        | 정상인 경우 메시지 없음      |  
| trnm          | 서비스명           | String  | N        | 7      | CNSRLST 고정값              |  
| data          | 조건검색식 목록    | LIST    | N        |        |                             |  
| - seq         | 조건검색식 일련번호| String  | N        |        |                             |  
| - name        | 조건검색식 명      | String  | N        |        |                             |  
```


## PYTHON
import asyncio 
import websockets
import json

# socket 정보
# SOCKET_URL = 'wss://mockapi.kiwoom.com:10000/api/dostk/websocket'  # 모의투자 접속 URL
SOCKET_URL = 'wss://api.kiwoom.com:10000/api/dostk/websocket'  # 접속 URL
ACCESS_TOKEN = '사용자 AccessToken'  # 고객 Access Token

class WebSocketClient:
	def __init__(self, uri):
		self.uri = uri
		self.websocket = None
		self.connected = False
		self.keep_running = True

	# WebSocket 서버에 연결합니다.
	async def connect(self):
		try:
			self.websocket = await websockets.connect(self.uri)
			self.connected = True
			print("서버와 연결을 시도 중입니다.")

			# 로그인 패킷
			param = {
				'trnm': 'LOGIN',
				'token': ACCESS_TOKEN
			}

			print('실시간 시세 서버로 로그인 패킷을 전송합니다.')
			# 웹소켓 연결 시 로그인 정보 전달
			await self.send_message(message=param)

		except Exception as e:
			print(f'Connection error: {e}')
			self.connected = False

	# 서버에 메시지를 보냅니다. 연결이 없다면 자동으로 연결합니다.
	async def send_message(self, message):
		if not self.connected:
			await self.connect()  # 연결이 끊어졌다면 재연결
		if self.connected:
			# message가 문자열이 아니면 JSON으로 직렬화
			if not isinstance(message, str):
				message = json.dumps(message)

		await self.websocket.send(message)
		print(f'Message sent: {message}')

	# 서버에서 오는 메시지를 수신하여 출력합니다.
	async def receive_messages(self):
		while self.keep_running:
			try:
				# 서버로부터 수신한 메시지를 JSON 형식으로 파싱
				response = json.loads(await self.websocket.recv())

				# 메시지 유형이 LOGIN일 경우 로그인 시도 결과 체크
				if response.get('trnm') == 'LOGIN':
					if response.get('return_code') != 0:
						print('로그인 실패하였습니다. : ', response.get('return_msg'))
						await self.disconnect()
					else:
						print('로그인 성공하였습니다.')

				# 메시지 유형이 PING일 경우 수신값 그대로 송신
				elif response.get('trnm') == 'PING':
					await self.send_message(response)

				if response.get('trnm') != 'PING':
					print(f'실시간 시세 서버 응답 수신: {response}')

			except websockets.ConnectionClosed:
				print('Connection closed by the server')
				self.connected = False
				await self.websocket.close()

	# WebSocket 실행
	async def run(self):
		await self.connect()
		await self.receive_messages()

	# WebSocket 연결 종료
	async def disconnect(self):
		self.keep_running = False
		if self.connected and self.websocket:
			await self.websocket.close()
			self.connected = False
			print('Disconnected from WebSocket server')

async def main():
	# WebSocketClient 전역 변수 선언
	websocket_client = WebSocketClient(SOCKET_URL)

	# WebSocket 클라이언트를 백그라운드에서 실행합니다.
	receive_task = asyncio.create_task(websocket_client.run())

	# 실시간 항목 등록
	await asyncio.sleep(1)
	await websocket_client.send_message({ 
		'trnm': 'CNSRLST', # TR명
	})

	# 수신 작업이 종료될 때까지 대기
	await receive_task

# asyncio로 프로그램을 실행합니다.
if __name__ == '__main__':
	asyncio.run(main())


    ## Example


Request
{
	"trnm" : "CNSRLST"
}
Response
{
	'trnm': 'CNSRLST',
	'return_code': 0,
	'return_msg': '',
	'data': [
		['0','조건1'],
		['1','조건2'],
		['2','조건3'],
		['3','조건4'],
		['4','조건5']
	]
}

