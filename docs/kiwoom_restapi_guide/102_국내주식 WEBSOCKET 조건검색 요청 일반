파일이름 : 102_국내주식 WEBSOCKET 조건검색 요청 일반.md
# 국내주식  
**WEBSOCKET**  
**조건검색**  

## 기본 정보  
※ ka10172 (조건검색 요청 일반)  
**조건검색은 영웅문4에서 만드실 수 있습니다.**  

| 항목             | 내용                                             |
|------------------|--------------------------------------------------|
| Method           | POST                                             |
| 운영 도메인      | wss://api.kiwoom.com:10000                       |
| 모의투자 도메인  | wss://mockapi.kiwoom.com:10000 (KRX만 지원가능)  |
| URL              | /api/dostk/websocket                             |
| Format           | JSON                                             |
| Content-Type     | application/json;charset=UTF-8                   |

[다른 TR 확인하기]

## TR명

| TR명                    | 코드     |
|-------------------------|----------|
| 조건검색 요청 일반      | ka10172  |
| 조건검색 목록조회       | ka10171  |
| 조건검색 요청 일반      | ka10172  |
| 조건검색 요청 실시간    | ka10173  |
| 조건검색 실시간 해제    | ka10174  |

## 요청

### Body

| Element      | 한글명           | type    | Required | Length | Description                      |
|--------------|-----------------|---------|----------|--------|----------------------------------|
| trnm         | 서비스명         | String  | Y        | 7      | CNSRREQ 고정값                   |
| seq          | 조건검색식 일련번호 | String  | Y        | 3      |                                  |
| search_type  | 조회타입         | String  | Y        |        | 0:조건검색                       |
| stex_tp      | 거래소구분       | String  | Y        | 1      | K:KRX                            |
| cont_yn      | 연속조회여부     | String  | N        | 1      | Y:연속조회요청, N:연속조회미요청  |
| next_key     | 연속조회키       | String  | N        | 20     |                                  |

## 응답

### Body

| Element       | 한글명           | type    | Length | Description                                   |
|---------------|-----------------|---------|--------|-----------------------------------------------|
| return_code   | 결과코드         | int     |        | 정상:0, 나머지:에러                          |
| return_msg    | 결과메시지       | String  |        | 정상인 경우는 메시지 없음                     |
| trnm          | 서비스명         | String  |        | CNSRREQ                                       |
| seq           | 조건검색식 일련번호 | String  |        |                                               |
| cont_yn       | 연속조회여부     | String  |        | 연속 데이터가 존재하는 경우 Y, 없으면 N        |
| next_key      | 연속조회키       | String  |        | 연속조회여부가 Y일 경우 다음 조회 시 필요한 값  |
| data          | 검색결과데이터   | LIST    |        |                                               |
| - 9001        | 종목코드         | String  |        |                                               |
| - 302         | 종목명           | String  |        |                                               |
| - 10          | 현재가           | String  |        |                                               |
| - 25          | 전일대비기호     | String  |        |                                               |
| - 11          | 전일대비         | String  |        |                                               |
| - 12          | 등락율           | String  |        |                                               |
| - 13          | 누적거래량       | String  |        |                                               |
| - 16          | 시가             | String  |        |                                               |
| - 17          | 고가             | String  |        |                                               |
| - 18          | 저가             | String  |        |                                               |
```


## PYTHON
import asyncio 
import websockets
import json

# socket 정보
# SOCKET_URL = 'wss://mockapi.kiwoom.com:10000/api/dostk/websocket'  # 모의투자 접속 URL
SOCKET_URL = 'wss://api.kiwoom.com:10000/api/dostk/websocket'  # 접속 URL
ACCESS_TOKEN = '사용자 AccessToken'  # 고객 Access Token

class WebSocketClient:
	def __init__(self, uri):
		self.uri = uri
		self.websocket = None
		self.connected = False
		self.keep_running = True

	# WebSocket 서버에 연결합니다.
	async def connect(self):
		try:
			self.websocket = await websockets.connect(self.uri)
			self.connected = True
			print("서버와 연결을 시도 중입니다.")

			# 로그인 패킷
			param = {
				'trnm': 'LOGIN',
				'token': ACCESS_TOKEN
			}

			print('실시간 시세 서버로 로그인 패킷을 전송합니다.')
			# 웹소켓 연결 시 로그인 정보 전달
			await self.send_message(message=param)

		except Exception as e:
			print(f'Connection error: {e}')
			self.connected = False

	# 서버에 메시지를 보냅니다. 연결이 없다면 자동으로 연결합니다.
	async def send_message(self, message):
		if not self.connected:
			await self.connect()  # 연결이 끊어졌다면 재연결
		if self.connected:
			# message가 문자열이 아니면 JSON으로 직렬화
			if not isinstance(message, str):
				message = json.dumps(message)

		await self.websocket.send(message)
		print(f'Message sent: {message}')

	# 서버에서 오는 메시지를 수신하여 출력합니다.
	async def receive_messages(self):
		while self.keep_running:
			try:
				# 서버로부터 수신한 메시지를 JSON 형식으로 파싱
				response = json.loads(await self.websocket.recv())

				# 메시지 유형이 LOGIN일 경우 로그인 시도 결과 체크
				if response.get('trnm') == 'LOGIN':
					if response.get('return_code') != 0:
						print('로그인 실패하였습니다. : ', response.get('return_msg'))
						await self.disconnect()
					else:
						print('로그인 성공하였습니다.')
						print('조건검색 목록조회 패킷을 전송합니다.')
						# 로그인 패킷
						param = {
							'trnm': 'CNSRLST'
						}
						await self.send_message(message=param)

				# 메시지 유형이 PING일 경우 수신값 그대로 송신
				elif response.get('trnm') == 'PING':
					await self.send_message(response)

				if response.get('trnm') != 'PING':
					print(f'실시간 시세 서버 응답 수신: {response}')

			except websockets.ConnectionClosed:
				print('Connection closed by the server')
				self.connected = False
				await self.websocket.close()

	# WebSocket 실행
	async def run(self):
		await self.connect()
		await self.receive_messages()

	# WebSocket 연결 종료
	async def disconnect(self):
		self.keep_running = False
		if self.connected and self.websocket:
			await self.websocket.close()
			self.connected = False
			print('Disconnected from WebSocket server')

async def main():
	# WebSocketClient 전역 변수 선언
	websocket_client = WebSocketClient(SOCKET_URL)

	# WebSocket 클라이언트를 백그라운드에서 실행합니다.
	receive_task = asyncio.create_task(websocket_client.run())

	# 실시간 항목 등록
	await asyncio.sleep(1)
	await websocket_client.send_message({ 
		'trnm': 'CNSRREQ', # 서비스명
		'seq': '4', # 조건검색식 일련번호
		'search_type': '0', # 조회타입
		'stex_tp': 'K', # 거래소구분
		'cont_yn': 'N', # 연속조회여부
		'next_key': '', # 연속조회키
	})

	# 수신 작업이 종료될 때까지 대기
	await receive_task

# asyncio로 프로그램을 실행합니다.
if __name__ == '__main__':
	asyncio.run(main())


    ## Example


Request
{
	"trnm" : "CNSRREQ",
	"seq" : "4",
	"search_type" : "0",
	"stex_tp" : "K",
	"cont_yn" : "N",
	"next_key" : ""
}
Response
{
	'trnm': 'CNSRREQ',
	'seq': '2  ',
	'cont_yn': 'N',
	'next_key': '',
	'return_code': 0,
	'data': [
		{
			'9001': 'A005930',
			'302': '삼성전자',
			'10': '000021850',
			'25': '3',
			'11': '000000000',
			'12': '000000000',
			'13': '000000000',
			'16': '000000000',
			'17': '000000000',
			'18': '000000000'
		},
		{
			'9001': 'A005930',
			'302': '삼성전자',
			'10': '000044350',
			'25': '3',
			'11': '000000000',
			'12': '000000000',
			'13': '000000000',
			'16': '000000000',
			'17': '000000000',
			'18': '000000000'
		},
		{
			'9001': 'A005930',
			'302': '삼성전자',
			'10': '000003855',
			'25': '3',
			'11': '000000000',
			'12': '000000000',
			'13': '000000000',
			'16': '000000000',
			'17': '000000000',
			'18': '000000000'
		},
		{
			'9001': 'A005930',
			'302': '삼성전자',
			'10': '000075000',
			'25': '5',
			'11': '-00000100',
			'12': '-00000130',
			'13': '010386116',
			'16': '000075100',
			'17': '000075600',
			'18': '000074700'
		},
		{
			'9001': 'A005930',
			'302': '삼성전자',
			'10': '000002900',
			'25': '3',
			'11': '000000000',
			'12': '000000000',
			'13': '000000000',
			'16': '000000000',
			'17': '000000000',
			'18': '000000000'
		}
	]
}
