{
  "rules": [
    {
      "title": "f-string 중첩 따옴표 및 복잡 표현 금지",
      "description": "f-string에서 중첩 따옴표나 dict.get 등 복잡한 표현이 필요한 경우 반드시 .format() 방식으로 문자열을 포매팅할 것. 단순 f-string은 허용."
    },
    {
      "title": "터미널 명령어 처리 원칙",
      "description": "터미널 명령어 실행 시 반드시 다음 순서를 준수한다: 1) platform.system() 또는 os.name으로 운영체제 감지 후 OS별 적합한 명령어 사용 (Windows: python, venv\\Scripts\\activate, \\ 경로구분자 / Linux/macOS: python3, venv/bin/activate, / 경로구분자), 2) 가상환경 활성화 상태 확인 후 필요시 활성화 (Windows: .\\venv\\Scripts\\activate / Linux/macOS: source venv/bin/activate), 3) Python 실행파일, 가상환경 경로, 경로 구분자, 셸 타입 등도 OS에 맞게 구분하여 사용한다."
    },
    {
      "title": "코드 품질 원칙",
      "description": "가독성 우선(명확한 네이밍, 일관된 스타일), 간결성과 명확성(KISS, DRY, 단일 책임), 타입 힌트 필수. 클래스/함수/상수/파일명 규칙을 지키고, 주석과 문서화를 철저히 한다."
    },
    {
      "title": "설계 원칙",
      "description": "SOLID 원칙(단일 책임, 개방-폐쇄, 리스코프 치환, 인터페이스 분리, 의존성 역전)과 모듈화/계층 구조를 지키며, 각 클래스/함수는 하나의 명확한 책임만 갖도록 설계한다."
    },
    {
      "title": "보안 및 환경 관리 원칙",
      "description": "API 키 등 민감정보는 .env 환경변수로 관리하고, 하드코딩 금지. 모든 사용자 입력은 검증하며, SQL 인젝션 방지, 최소 권한 원칙, 환경변수 분리 및 .gitignore 포함을 준수한다."
    },
    {
      "title": "에러 처리 및 로깅 원칙",
      "description": "예외는 체계적으로 처리하고, print() 대신 logging을 사용한다. 로깅은 파일과 콘솔 모두 기록하며, 에러/경고/정보 메시지를 구분해서 남긴다."
    }
  ]
} 